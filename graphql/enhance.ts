import { ClassType } from "type-graphql";
import * as tslib from "tslib";
import * as crudResolvers from "./resolvers/crud/resolvers-crud.index";
import * as argsTypes from "./resolvers/crud/args.index";
import * as actionResolvers from "./resolvers/crud/resolvers-actions.index";
import * as relationResolvers from "./resolvers/relations/resolvers.index";
import * as models from "./models";
import * as outputTypes from "./resolvers/outputs";
import * as inputTypes from "./resolvers/inputs";

export type MethodDecoratorOverrideFn = (
  decorators: MethodDecorator[],
) => MethodDecorator[];

const crudResolversMap = {
  User: crudResolvers.UserCrudResolver,
  Post: crudResolvers.PostCrudResolver,
  Profile: crudResolvers.ProfileCrudResolver,
  Comment: crudResolvers.CommentCrudResolver,
  Like: crudResolvers.LikeCrudResolver,
  Tag: crudResolvers.TagCrudResolver,
  Image: crudResolvers.ImageCrudResolver,
  Category: crudResolvers.CategoryCrudResolver,
  Video: crudResolvers.VideoCrudResolver,
  Audio: crudResolvers.AudioCrudResolver,
  File: crudResolvers.FileCrudResolver,
  Link: crudResolvers.LinkCrudResolver,
  Poll: crudResolvers.PollCrudResolver,
  Question: crudResolvers.QuestionCrudResolver,
  Answer: crudResolvers.AnswerCrudResolver,
  Quote: crudResolvers.QuoteCrudResolver,
  Code: crudResolvers.CodeCrudResolver,
};
const actionResolversMap = {
  User: {
    aggregateUser: actionResolvers.AggregateUserResolver,
    createManyUser: actionResolvers.CreateManyUserResolver,
    createOneUser: actionResolvers.CreateOneUserResolver,
    deleteManyUser: actionResolvers.DeleteManyUserResolver,
    deleteOneUser: actionResolvers.DeleteOneUserResolver,
    findFirstUser: actionResolvers.FindFirstUserResolver,
    findFirstUserOrThrow: actionResolvers.FindFirstUserOrThrowResolver,
    users: actionResolvers.FindManyUserResolver,
    user: actionResolvers.FindUniqueUserResolver,
    getUser: actionResolvers.FindUniqueUserOrThrowResolver,
    groupByUser: actionResolvers.GroupByUserResolver,
    updateManyUser: actionResolvers.UpdateManyUserResolver,
    updateOneUser: actionResolvers.UpdateOneUserResolver,
    upsertOneUser: actionResolvers.UpsertOneUserResolver,
  },
  Post: {
    aggregatePost: actionResolvers.AggregatePostResolver,
    createManyPost: actionResolvers.CreateManyPostResolver,
    createOnePost: actionResolvers.CreateOnePostResolver,
    deleteManyPost: actionResolvers.DeleteManyPostResolver,
    deleteOnePost: actionResolvers.DeleteOnePostResolver,
    findFirstPost: actionResolvers.FindFirstPostResolver,
    findFirstPostOrThrow: actionResolvers.FindFirstPostOrThrowResolver,
    posts: actionResolvers.FindManyPostResolver,
    post: actionResolvers.FindUniquePostResolver,
    getPost: actionResolvers.FindUniquePostOrThrowResolver,
    groupByPost: actionResolvers.GroupByPostResolver,
    updateManyPost: actionResolvers.UpdateManyPostResolver,
    updateOnePost: actionResolvers.UpdateOnePostResolver,
    upsertOnePost: actionResolvers.UpsertOnePostResolver,
  },
  Profile: {
    aggregateProfile: actionResolvers.AggregateProfileResolver,
    createManyProfile: actionResolvers.CreateManyProfileResolver,
    createOneProfile: actionResolvers.CreateOneProfileResolver,
    deleteManyProfile: actionResolvers.DeleteManyProfileResolver,
    deleteOneProfile: actionResolvers.DeleteOneProfileResolver,
    findFirstProfile: actionResolvers.FindFirstProfileResolver,
    findFirstProfileOrThrow: actionResolvers.FindFirstProfileOrThrowResolver,
    profiles: actionResolvers.FindManyProfileResolver,
    profile: actionResolvers.FindUniqueProfileResolver,
    getProfile: actionResolvers.FindUniqueProfileOrThrowResolver,
    groupByProfile: actionResolvers.GroupByProfileResolver,
    updateManyProfile: actionResolvers.UpdateManyProfileResolver,
    updateOneProfile: actionResolvers.UpdateOneProfileResolver,
    upsertOneProfile: actionResolvers.UpsertOneProfileResolver,
  },
  Comment: {
    aggregateComment: actionResolvers.AggregateCommentResolver,
    createManyComment: actionResolvers.CreateManyCommentResolver,
    createOneComment: actionResolvers.CreateOneCommentResolver,
    deleteManyComment: actionResolvers.DeleteManyCommentResolver,
    deleteOneComment: actionResolvers.DeleteOneCommentResolver,
    findFirstComment: actionResolvers.FindFirstCommentResolver,
    findFirstCommentOrThrow: actionResolvers.FindFirstCommentOrThrowResolver,
    comments: actionResolvers.FindManyCommentResolver,
    comment: actionResolvers.FindUniqueCommentResolver,
    getComment: actionResolvers.FindUniqueCommentOrThrowResolver,
    groupByComment: actionResolvers.GroupByCommentResolver,
    updateManyComment: actionResolvers.UpdateManyCommentResolver,
    updateOneComment: actionResolvers.UpdateOneCommentResolver,
    upsertOneComment: actionResolvers.UpsertOneCommentResolver,
  },
  Like: {
    aggregateLike: actionResolvers.AggregateLikeResolver,
    createManyLike: actionResolvers.CreateManyLikeResolver,
    createOneLike: actionResolvers.CreateOneLikeResolver,
    deleteManyLike: actionResolvers.DeleteManyLikeResolver,
    deleteOneLike: actionResolvers.DeleteOneLikeResolver,
    findFirstLike: actionResolvers.FindFirstLikeResolver,
    findFirstLikeOrThrow: actionResolvers.FindFirstLikeOrThrowResolver,
    likes: actionResolvers.FindManyLikeResolver,
    like: actionResolvers.FindUniqueLikeResolver,
    getLike: actionResolvers.FindUniqueLikeOrThrowResolver,
    groupByLike: actionResolvers.GroupByLikeResolver,
    updateManyLike: actionResolvers.UpdateManyLikeResolver,
    updateOneLike: actionResolvers.UpdateOneLikeResolver,
    upsertOneLike: actionResolvers.UpsertOneLikeResolver,
  },
  Tag: {
    aggregateTag: actionResolvers.AggregateTagResolver,
    createManyTag: actionResolvers.CreateManyTagResolver,
    createOneTag: actionResolvers.CreateOneTagResolver,
    deleteManyTag: actionResolvers.DeleteManyTagResolver,
    deleteOneTag: actionResolvers.DeleteOneTagResolver,
    findFirstTag: actionResolvers.FindFirstTagResolver,
    findFirstTagOrThrow: actionResolvers.FindFirstTagOrThrowResolver,
    tags: actionResolvers.FindManyTagResolver,
    tag: actionResolvers.FindUniqueTagResolver,
    getTag: actionResolvers.FindUniqueTagOrThrowResolver,
    groupByTag: actionResolvers.GroupByTagResolver,
    updateManyTag: actionResolvers.UpdateManyTagResolver,
    updateOneTag: actionResolvers.UpdateOneTagResolver,
    upsertOneTag: actionResolvers.UpsertOneTagResolver,
  },
  Image: {
    aggregateImage: actionResolvers.AggregateImageResolver,
    createManyImage: actionResolvers.CreateManyImageResolver,
    createOneImage: actionResolvers.CreateOneImageResolver,
    deleteManyImage: actionResolvers.DeleteManyImageResolver,
    deleteOneImage: actionResolvers.DeleteOneImageResolver,
    findFirstImage: actionResolvers.FindFirstImageResolver,
    findFirstImageOrThrow: actionResolvers.FindFirstImageOrThrowResolver,
    images: actionResolvers.FindManyImageResolver,
    image: actionResolvers.FindUniqueImageResolver,
    getImage: actionResolvers.FindUniqueImageOrThrowResolver,
    groupByImage: actionResolvers.GroupByImageResolver,
    updateManyImage: actionResolvers.UpdateManyImageResolver,
    updateOneImage: actionResolvers.UpdateOneImageResolver,
    upsertOneImage: actionResolvers.UpsertOneImageResolver,
  },
  Category: {
    aggregateCategory: actionResolvers.AggregateCategoryResolver,
    createManyCategory: actionResolvers.CreateManyCategoryResolver,
    createOneCategory: actionResolvers.CreateOneCategoryResolver,
    deleteManyCategory: actionResolvers.DeleteManyCategoryResolver,
    deleteOneCategory: actionResolvers.DeleteOneCategoryResolver,
    findFirstCategory: actionResolvers.FindFirstCategoryResolver,
    findFirstCategoryOrThrow: actionResolvers.FindFirstCategoryOrThrowResolver,
    categories: actionResolvers.FindManyCategoryResolver,
    category: actionResolvers.FindUniqueCategoryResolver,
    getCategory: actionResolvers.FindUniqueCategoryOrThrowResolver,
    groupByCategory: actionResolvers.GroupByCategoryResolver,
    updateManyCategory: actionResolvers.UpdateManyCategoryResolver,
    updateOneCategory: actionResolvers.UpdateOneCategoryResolver,
    upsertOneCategory: actionResolvers.UpsertOneCategoryResolver,
  },
  Video: {
    aggregateVideo: actionResolvers.AggregateVideoResolver,
    createManyVideo: actionResolvers.CreateManyVideoResolver,
    createOneVideo: actionResolvers.CreateOneVideoResolver,
    deleteManyVideo: actionResolvers.DeleteManyVideoResolver,
    deleteOneVideo: actionResolvers.DeleteOneVideoResolver,
    findFirstVideo: actionResolvers.FindFirstVideoResolver,
    findFirstVideoOrThrow: actionResolvers.FindFirstVideoOrThrowResolver,
    videos: actionResolvers.FindManyVideoResolver,
    video: actionResolvers.FindUniqueVideoResolver,
    getVideo: actionResolvers.FindUniqueVideoOrThrowResolver,
    groupByVideo: actionResolvers.GroupByVideoResolver,
    updateManyVideo: actionResolvers.UpdateManyVideoResolver,
    updateOneVideo: actionResolvers.UpdateOneVideoResolver,
    upsertOneVideo: actionResolvers.UpsertOneVideoResolver,
  },
  Audio: {
    aggregateAudio: actionResolvers.AggregateAudioResolver,
    createManyAudio: actionResolvers.CreateManyAudioResolver,
    createOneAudio: actionResolvers.CreateOneAudioResolver,
    deleteManyAudio: actionResolvers.DeleteManyAudioResolver,
    deleteOneAudio: actionResolvers.DeleteOneAudioResolver,
    findFirstAudio: actionResolvers.FindFirstAudioResolver,
    findFirstAudioOrThrow: actionResolvers.FindFirstAudioOrThrowResolver,
    findManyAudio: actionResolvers.FindManyAudioResolver,
    findUniqueAudio: actionResolvers.FindUniqueAudioResolver,
    findUniqueAudioOrThrow: actionResolvers.FindUniqueAudioOrThrowResolver,
    groupByAudio: actionResolvers.GroupByAudioResolver,
    updateManyAudio: actionResolvers.UpdateManyAudioResolver,
    updateOneAudio: actionResolvers.UpdateOneAudioResolver,
    upsertOneAudio: actionResolvers.UpsertOneAudioResolver,
  },
  File: {
    aggregateFile: actionResolvers.AggregateFileResolver,
    createManyFile: actionResolvers.CreateManyFileResolver,
    createOneFile: actionResolvers.CreateOneFileResolver,
    deleteManyFile: actionResolvers.DeleteManyFileResolver,
    deleteOneFile: actionResolvers.DeleteOneFileResolver,
    findFirstFile: actionResolvers.FindFirstFileResolver,
    findFirstFileOrThrow: actionResolvers.FindFirstFileOrThrowResolver,
    files: actionResolvers.FindManyFileResolver,
    file: actionResolvers.FindUniqueFileResolver,
    getFile: actionResolvers.FindUniqueFileOrThrowResolver,
    groupByFile: actionResolvers.GroupByFileResolver,
    updateManyFile: actionResolvers.UpdateManyFileResolver,
    updateOneFile: actionResolvers.UpdateOneFileResolver,
    upsertOneFile: actionResolvers.UpsertOneFileResolver,
  },
  Link: {
    aggregateLink: actionResolvers.AggregateLinkResolver,
    createManyLink: actionResolvers.CreateManyLinkResolver,
    createOneLink: actionResolvers.CreateOneLinkResolver,
    deleteManyLink: actionResolvers.DeleteManyLinkResolver,
    deleteOneLink: actionResolvers.DeleteOneLinkResolver,
    findFirstLink: actionResolvers.FindFirstLinkResolver,
    findFirstLinkOrThrow: actionResolvers.FindFirstLinkOrThrowResolver,
    links: actionResolvers.FindManyLinkResolver,
    link: actionResolvers.FindUniqueLinkResolver,
    getLink: actionResolvers.FindUniqueLinkOrThrowResolver,
    groupByLink: actionResolvers.GroupByLinkResolver,
    updateManyLink: actionResolvers.UpdateManyLinkResolver,
    updateOneLink: actionResolvers.UpdateOneLinkResolver,
    upsertOneLink: actionResolvers.UpsertOneLinkResolver,
  },
  Poll: {
    aggregatePoll: actionResolvers.AggregatePollResolver,
    createManyPoll: actionResolvers.CreateManyPollResolver,
    createOnePoll: actionResolvers.CreateOnePollResolver,
    deleteManyPoll: actionResolvers.DeleteManyPollResolver,
    deleteOnePoll: actionResolvers.DeleteOnePollResolver,
    findFirstPoll: actionResolvers.FindFirstPollResolver,
    findFirstPollOrThrow: actionResolvers.FindFirstPollOrThrowResolver,
    polls: actionResolvers.FindManyPollResolver,
    poll: actionResolvers.FindUniquePollResolver,
    getPoll: actionResolvers.FindUniquePollOrThrowResolver,
    groupByPoll: actionResolvers.GroupByPollResolver,
    updateManyPoll: actionResolvers.UpdateManyPollResolver,
    updateOnePoll: actionResolvers.UpdateOnePollResolver,
    upsertOnePoll: actionResolvers.UpsertOnePollResolver,
  },
  Question: {
    aggregateQuestion: actionResolvers.AggregateQuestionResolver,
    createManyQuestion: actionResolvers.CreateManyQuestionResolver,
    createOneQuestion: actionResolvers.CreateOneQuestionResolver,
    deleteManyQuestion: actionResolvers.DeleteManyQuestionResolver,
    deleteOneQuestion: actionResolvers.DeleteOneQuestionResolver,
    findFirstQuestion: actionResolvers.FindFirstQuestionResolver,
    findFirstQuestionOrThrow: actionResolvers.FindFirstQuestionOrThrowResolver,
    questions: actionResolvers.FindManyQuestionResolver,
    question: actionResolvers.FindUniqueQuestionResolver,
    getQuestion: actionResolvers.FindUniqueQuestionOrThrowResolver,
    groupByQuestion: actionResolvers.GroupByQuestionResolver,
    updateManyQuestion: actionResolvers.UpdateManyQuestionResolver,
    updateOneQuestion: actionResolvers.UpdateOneQuestionResolver,
    upsertOneQuestion: actionResolvers.UpsertOneQuestionResolver,
  },
  Answer: {
    aggregateAnswer: actionResolvers.AggregateAnswerResolver,
    createManyAnswer: actionResolvers.CreateManyAnswerResolver,
    createOneAnswer: actionResolvers.CreateOneAnswerResolver,
    deleteManyAnswer: actionResolvers.DeleteManyAnswerResolver,
    deleteOneAnswer: actionResolvers.DeleteOneAnswerResolver,
    findFirstAnswer: actionResolvers.FindFirstAnswerResolver,
    findFirstAnswerOrThrow: actionResolvers.FindFirstAnswerOrThrowResolver,
    answers: actionResolvers.FindManyAnswerResolver,
    answer: actionResolvers.FindUniqueAnswerResolver,
    getAnswer: actionResolvers.FindUniqueAnswerOrThrowResolver,
    groupByAnswer: actionResolvers.GroupByAnswerResolver,
    updateManyAnswer: actionResolvers.UpdateManyAnswerResolver,
    updateOneAnswer: actionResolvers.UpdateOneAnswerResolver,
    upsertOneAnswer: actionResolvers.UpsertOneAnswerResolver,
  },
  Quote: {
    aggregateQuote: actionResolvers.AggregateQuoteResolver,
    createManyQuote: actionResolvers.CreateManyQuoteResolver,
    createOneQuote: actionResolvers.CreateOneQuoteResolver,
    deleteManyQuote: actionResolvers.DeleteManyQuoteResolver,
    deleteOneQuote: actionResolvers.DeleteOneQuoteResolver,
    findFirstQuote: actionResolvers.FindFirstQuoteResolver,
    findFirstQuoteOrThrow: actionResolvers.FindFirstQuoteOrThrowResolver,
    quotes: actionResolvers.FindManyQuoteResolver,
    quote: actionResolvers.FindUniqueQuoteResolver,
    getQuote: actionResolvers.FindUniqueQuoteOrThrowResolver,
    groupByQuote: actionResolvers.GroupByQuoteResolver,
    updateManyQuote: actionResolvers.UpdateManyQuoteResolver,
    updateOneQuote: actionResolvers.UpdateOneQuoteResolver,
    upsertOneQuote: actionResolvers.UpsertOneQuoteResolver,
  },
  Code: {
    aggregateCode: actionResolvers.AggregateCodeResolver,
    createManyCode: actionResolvers.CreateManyCodeResolver,
    createOneCode: actionResolvers.CreateOneCodeResolver,
    deleteManyCode: actionResolvers.DeleteManyCodeResolver,
    deleteOneCode: actionResolvers.DeleteOneCodeResolver,
    findFirstCode: actionResolvers.FindFirstCodeResolver,
    findFirstCodeOrThrow: actionResolvers.FindFirstCodeOrThrowResolver,
    codes: actionResolvers.FindManyCodeResolver,
    code: actionResolvers.FindUniqueCodeResolver,
    getCode: actionResolvers.FindUniqueCodeOrThrowResolver,
    groupByCode: actionResolvers.GroupByCodeResolver,
    updateManyCode: actionResolvers.UpdateManyCodeResolver,
    updateOneCode: actionResolvers.UpdateOneCodeResolver,
    upsertOneCode: actionResolvers.UpsertOneCodeResolver,
  },
};
const crudResolversInfo = {
  User: [
    "aggregateUser",
    "createManyUser",
    "createOneUser",
    "deleteManyUser",
    "deleteOneUser",
    "findFirstUser",
    "findFirstUserOrThrow",
    "users",
    "user",
    "getUser",
    "groupByUser",
    "updateManyUser",
    "updateOneUser",
    "upsertOneUser",
  ],
  Post: [
    "aggregatePost",
    "createManyPost",
    "createOnePost",
    "deleteManyPost",
    "deleteOnePost",
    "findFirstPost",
    "findFirstPostOrThrow",
    "posts",
    "post",
    "getPost",
    "groupByPost",
    "updateManyPost",
    "updateOnePost",
    "upsertOnePost",
  ],
  Profile: [
    "aggregateProfile",
    "createManyProfile",
    "createOneProfile",
    "deleteManyProfile",
    "deleteOneProfile",
    "findFirstProfile",
    "findFirstProfileOrThrow",
    "profiles",
    "profile",
    "getProfile",
    "groupByProfile",
    "updateManyProfile",
    "updateOneProfile",
    "upsertOneProfile",
  ],
  Comment: [
    "aggregateComment",
    "createManyComment",
    "createOneComment",
    "deleteManyComment",
    "deleteOneComment",
    "findFirstComment",
    "findFirstCommentOrThrow",
    "comments",
    "comment",
    "getComment",
    "groupByComment",
    "updateManyComment",
    "updateOneComment",
    "upsertOneComment",
  ],
  Like: [
    "aggregateLike",
    "createManyLike",
    "createOneLike",
    "deleteManyLike",
    "deleteOneLike",
    "findFirstLike",
    "findFirstLikeOrThrow",
    "likes",
    "like",
    "getLike",
    "groupByLike",
    "updateManyLike",
    "updateOneLike",
    "upsertOneLike",
  ],
  Tag: [
    "aggregateTag",
    "createManyTag",
    "createOneTag",
    "deleteManyTag",
    "deleteOneTag",
    "findFirstTag",
    "findFirstTagOrThrow",
    "tags",
    "tag",
    "getTag",
    "groupByTag",
    "updateManyTag",
    "updateOneTag",
    "upsertOneTag",
  ],
  Image: [
    "aggregateImage",
    "createManyImage",
    "createOneImage",
    "deleteManyImage",
    "deleteOneImage",
    "findFirstImage",
    "findFirstImageOrThrow",
    "images",
    "image",
    "getImage",
    "groupByImage",
    "updateManyImage",
    "updateOneImage",
    "upsertOneImage",
  ],
  Category: [
    "aggregateCategory",
    "createManyCategory",
    "createOneCategory",
    "deleteManyCategory",
    "deleteOneCategory",
    "findFirstCategory",
    "findFirstCategoryOrThrow",
    "categories",
    "category",
    "getCategory",
    "groupByCategory",
    "updateManyCategory",
    "updateOneCategory",
    "upsertOneCategory",
  ],
  Video: [
    "aggregateVideo",
    "createManyVideo",
    "createOneVideo",
    "deleteManyVideo",
    "deleteOneVideo",
    "findFirstVideo",
    "findFirstVideoOrThrow",
    "videos",
    "video",
    "getVideo",
    "groupByVideo",
    "updateManyVideo",
    "updateOneVideo",
    "upsertOneVideo",
  ],
  Audio: [
    "aggregateAudio",
    "createManyAudio",
    "createOneAudio",
    "deleteManyAudio",
    "deleteOneAudio",
    "findFirstAudio",
    "findFirstAudioOrThrow",
    "findManyAudio",
    "findUniqueAudio",
    "findUniqueAudioOrThrow",
    "groupByAudio",
    "updateManyAudio",
    "updateOneAudio",
    "upsertOneAudio",
  ],
  File: [
    "aggregateFile",
    "createManyFile",
    "createOneFile",
    "deleteManyFile",
    "deleteOneFile",
    "findFirstFile",
    "findFirstFileOrThrow",
    "files",
    "file",
    "getFile",
    "groupByFile",
    "updateManyFile",
    "updateOneFile",
    "upsertOneFile",
  ],
  Link: [
    "aggregateLink",
    "createManyLink",
    "createOneLink",
    "deleteManyLink",
    "deleteOneLink",
    "findFirstLink",
    "findFirstLinkOrThrow",
    "links",
    "link",
    "getLink",
    "groupByLink",
    "updateManyLink",
    "updateOneLink",
    "upsertOneLink",
  ],
  Poll: [
    "aggregatePoll",
    "createManyPoll",
    "createOnePoll",
    "deleteManyPoll",
    "deleteOnePoll",
    "findFirstPoll",
    "findFirstPollOrThrow",
    "polls",
    "poll",
    "getPoll",
    "groupByPoll",
    "updateManyPoll",
    "updateOnePoll",
    "upsertOnePoll",
  ],
  Question: [
    "aggregateQuestion",
    "createManyQuestion",
    "createOneQuestion",
    "deleteManyQuestion",
    "deleteOneQuestion",
    "findFirstQuestion",
    "findFirstQuestionOrThrow",
    "questions",
    "question",
    "getQuestion",
    "groupByQuestion",
    "updateManyQuestion",
    "updateOneQuestion",
    "upsertOneQuestion",
  ],
  Answer: [
    "aggregateAnswer",
    "createManyAnswer",
    "createOneAnswer",
    "deleteManyAnswer",
    "deleteOneAnswer",
    "findFirstAnswer",
    "findFirstAnswerOrThrow",
    "answers",
    "answer",
    "getAnswer",
    "groupByAnswer",
    "updateManyAnswer",
    "updateOneAnswer",
    "upsertOneAnswer",
  ],
  Quote: [
    "aggregateQuote",
    "createManyQuote",
    "createOneQuote",
    "deleteManyQuote",
    "deleteOneQuote",
    "findFirstQuote",
    "findFirstQuoteOrThrow",
    "quotes",
    "quote",
    "getQuote",
    "groupByQuote",
    "updateManyQuote",
    "updateOneQuote",
    "upsertOneQuote",
  ],
  Code: [
    "aggregateCode",
    "createManyCode",
    "createOneCode",
    "deleteManyCode",
    "deleteOneCode",
    "findFirstCode",
    "findFirstCodeOrThrow",
    "codes",
    "code",
    "getCode",
    "groupByCode",
    "updateManyCode",
    "updateOneCode",
    "upsertOneCode",
  ],
};
const argsInfo = {
  AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyUserArgs: ["data", "skipDuplicates"],
  CreateOneUserArgs: ["data"],
  DeleteManyUserArgs: ["where"],
  DeleteOneUserArgs: ["where"],
  FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstUserOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueUserArgs: ["where"],
  FindUniqueUserOrThrowArgs: ["where"],
  GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyUserArgs: ["data", "where"],
  UpdateOneUserArgs: ["data", "where"],
  UpsertOneUserArgs: ["where", "create", "update"],
  AggregatePostArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyPostArgs: ["data", "skipDuplicates"],
  CreateOnePostArgs: ["data"],
  DeleteManyPostArgs: ["where"],
  DeleteOnePostArgs: ["where"],
  FindFirstPostArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstPostOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyPostArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniquePostArgs: ["where"],
  FindUniquePostOrThrowArgs: ["where"],
  GroupByPostArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyPostArgs: ["data", "where"],
  UpdateOnePostArgs: ["data", "where"],
  UpsertOnePostArgs: ["where", "create", "update"],
  AggregateProfileArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyProfileArgs: ["data", "skipDuplicates"],
  CreateOneProfileArgs: ["data"],
  DeleteManyProfileArgs: ["where"],
  DeleteOneProfileArgs: ["where"],
  FindFirstProfileArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindFirstProfileOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyProfileArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindUniqueProfileArgs: ["where"],
  FindUniqueProfileOrThrowArgs: ["where"],
  GroupByProfileArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyProfileArgs: ["data", "where"],
  UpdateOneProfileArgs: ["data", "where"],
  UpsertOneProfileArgs: ["where", "create", "update"],
  AggregateCommentArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyCommentArgs: ["data", "skipDuplicates"],
  CreateOneCommentArgs: ["data"],
  DeleteManyCommentArgs: ["where"],
  DeleteOneCommentArgs: ["where"],
  FindFirstCommentArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindFirstCommentOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyCommentArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindUniqueCommentArgs: ["where"],
  FindUniqueCommentOrThrowArgs: ["where"],
  GroupByCommentArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyCommentArgs: ["data", "where"],
  UpdateOneCommentArgs: ["data", "where"],
  UpsertOneCommentArgs: ["where", "create", "update"],
  AggregateLikeArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyLikeArgs: ["data", "skipDuplicates"],
  CreateOneLikeArgs: ["data"],
  DeleteManyLikeArgs: ["where"],
  DeleteOneLikeArgs: ["where"],
  FindFirstLikeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstLikeOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyLikeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueLikeArgs: ["where"],
  FindUniqueLikeOrThrowArgs: ["where"],
  GroupByLikeArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyLikeArgs: ["data", "where"],
  UpdateOneLikeArgs: ["data", "where"],
  UpsertOneLikeArgs: ["where", "create", "update"],
  AggregateTagArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyTagArgs: ["data", "skipDuplicates"],
  CreateOneTagArgs: ["data"],
  DeleteManyTagArgs: ["where"],
  DeleteOneTagArgs: ["where"],
  FindFirstTagArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstTagOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyTagArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueTagArgs: ["where"],
  FindUniqueTagOrThrowArgs: ["where"],
  GroupByTagArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyTagArgs: ["data", "where"],
  UpdateOneTagArgs: ["data", "where"],
  UpsertOneTagArgs: ["where", "create", "update"],
  AggregateImageArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyImageArgs: ["data", "skipDuplicates"],
  CreateOneImageArgs: ["data"],
  DeleteManyImageArgs: ["where"],
  DeleteOneImageArgs: ["where"],
  FindFirstImageArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindFirstImageOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyImageArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueImageArgs: ["where"],
  FindUniqueImageOrThrowArgs: ["where"],
  GroupByImageArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyImageArgs: ["data", "where"],
  UpdateOneImageArgs: ["data", "where"],
  UpsertOneImageArgs: ["where", "create", "update"],
  AggregateCategoryArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyCategoryArgs: ["data", "skipDuplicates"],
  CreateOneCategoryArgs: ["data"],
  DeleteManyCategoryArgs: ["where"],
  DeleteOneCategoryArgs: ["where"],
  FindFirstCategoryArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindFirstCategoryOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyCategoryArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindUniqueCategoryArgs: ["where"],
  FindUniqueCategoryOrThrowArgs: ["where"],
  GroupByCategoryArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyCategoryArgs: ["data", "where"],
  UpdateOneCategoryArgs: ["data", "where"],
  UpsertOneCategoryArgs: ["where", "create", "update"],
  AggregateVideoArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyVideoArgs: ["data", "skipDuplicates"],
  CreateOneVideoArgs: ["data"],
  DeleteManyVideoArgs: ["where"],
  DeleteOneVideoArgs: ["where"],
  FindFirstVideoArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindFirstVideoOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyVideoArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueVideoArgs: ["where"],
  FindUniqueVideoOrThrowArgs: ["where"],
  GroupByVideoArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyVideoArgs: ["data", "where"],
  UpdateOneVideoArgs: ["data", "where"],
  UpsertOneVideoArgs: ["where", "create", "update"],
  AggregateAudioArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyAudioArgs: ["data", "skipDuplicates"],
  CreateOneAudioArgs: ["data"],
  DeleteManyAudioArgs: ["where"],
  DeleteOneAudioArgs: ["where"],
  FindFirstAudioArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindFirstAudioOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyAudioArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueAudioArgs: ["where"],
  FindUniqueAudioOrThrowArgs: ["where"],
  GroupByAudioArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyAudioArgs: ["data", "where"],
  UpdateOneAudioArgs: ["data", "where"],
  UpsertOneAudioArgs: ["where", "create", "update"],
  AggregateFileArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyFileArgs: ["data", "skipDuplicates"],
  CreateOneFileArgs: ["data"],
  DeleteManyFileArgs: ["where"],
  DeleteOneFileArgs: ["where"],
  FindFirstFileArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstFileOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyFileArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueFileArgs: ["where"],
  FindUniqueFileOrThrowArgs: ["where"],
  GroupByFileArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyFileArgs: ["data", "where"],
  UpdateOneFileArgs: ["data", "where"],
  UpsertOneFileArgs: ["where", "create", "update"],
  AggregateLinkArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyLinkArgs: ["data", "skipDuplicates"],
  CreateOneLinkArgs: ["data"],
  DeleteManyLinkArgs: ["where"],
  DeleteOneLinkArgs: ["where"],
  FindFirstLinkArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstLinkOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyLinkArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueLinkArgs: ["where"],
  FindUniqueLinkOrThrowArgs: ["where"],
  GroupByLinkArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyLinkArgs: ["data", "where"],
  UpdateOneLinkArgs: ["data", "where"],
  UpsertOneLinkArgs: ["where", "create", "update"],
  AggregatePollArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyPollArgs: ["data", "skipDuplicates"],
  CreateOnePollArgs: ["data"],
  DeleteManyPollArgs: ["where"],
  DeleteOnePollArgs: ["where"],
  FindFirstPollArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstPollOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyPollArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniquePollArgs: ["where"],
  FindUniquePollOrThrowArgs: ["where"],
  GroupByPollArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyPollArgs: ["data", "where"],
  UpdateOnePollArgs: ["data", "where"],
  UpsertOnePollArgs: ["where", "create", "update"],
  AggregateQuestionArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyQuestionArgs: ["data", "skipDuplicates"],
  CreateOneQuestionArgs: ["data"],
  DeleteManyQuestionArgs: ["where"],
  DeleteOneQuestionArgs: ["where"],
  FindFirstQuestionArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindFirstQuestionOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyQuestionArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindUniqueQuestionArgs: ["where"],
  FindUniqueQuestionOrThrowArgs: ["where"],
  GroupByQuestionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyQuestionArgs: ["data", "where"],
  UpdateOneQuestionArgs: ["data", "where"],
  UpsertOneQuestionArgs: ["where", "create", "update"],
  AggregateAnswerArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyAnswerArgs: ["data", "skipDuplicates"],
  CreateOneAnswerArgs: ["data"],
  DeleteManyAnswerArgs: ["where"],
  DeleteOneAnswerArgs: ["where"],
  FindFirstAnswerArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindFirstAnswerOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyAnswerArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindUniqueAnswerArgs: ["where"],
  FindUniqueAnswerOrThrowArgs: ["where"],
  GroupByAnswerArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyAnswerArgs: ["data", "where"],
  UpdateOneAnswerArgs: ["data", "where"],
  UpsertOneAnswerArgs: ["where", "create", "update"],
  AggregateQuoteArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyQuoteArgs: ["data", "skipDuplicates"],
  CreateOneQuoteArgs: ["data"],
  DeleteManyQuoteArgs: ["where"],
  DeleteOneQuoteArgs: ["where"],
  FindFirstQuoteArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindFirstQuoteOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyQuoteArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueQuoteArgs: ["where"],
  FindUniqueQuoteOrThrowArgs: ["where"],
  GroupByQuoteArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyQuoteArgs: ["data", "where"],
  UpdateOneQuoteArgs: ["data", "where"],
  UpsertOneQuoteArgs: ["where", "create", "update"],
  AggregateCodeArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyCodeArgs: ["data", "skipDuplicates"],
  CreateOneCodeArgs: ["data"],
  DeleteManyCodeArgs: ["where"],
  DeleteOneCodeArgs: ["where"],
  FindFirstCodeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstCodeOrThrowArgs: [
    "where",
    "orderBy",
    "cursor",
    "take",
    "skip",
    "distinct",
  ],
  FindManyCodeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueCodeArgs: ["where"],
  FindUniqueCodeOrThrowArgs: ["where"],
  GroupByCodeArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyCodeArgs: ["data", "where"],
  UpdateOneCodeArgs: ["data", "where"],
  UpsertOneCodeArgs: ["where", "create", "update"],
};

type ResolverModelNames = keyof typeof crudResolversMap;

type ModelResolverActionNames<TModel extends ResolverModelNames> =
  keyof (typeof crudResolversMap)[TModel]["prototype"];

export type ResolverActionsConfig<TModel extends ResolverModelNames> = Partial<
  Record<
    ModelResolverActionNames<TModel>,
    MethodDecorator[] | MethodDecoratorOverrideFn
  >
> & {
  _all?: MethodDecorator[];
  _query?: MethodDecorator[];
  _mutation?: MethodDecorator[];
};

export type ResolversEnhanceMap = {
  [TModel in ResolverModelNames]?: ResolverActionsConfig<TModel>;
};

export function applyResolversEnhanceMap(
  resolversEnhanceMap: ResolversEnhanceMap,
) {
  const mutationOperationPrefixes = [
    "createOne",
    "createMany",
    "deleteOne",
    "updateOne",
    "deleteMany",
    "updateMany",
    "upsertOne",
  ];
  for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
    const modelName =
      resolversEnhanceMapKey as keyof typeof resolversEnhanceMap;
    const crudTarget = crudResolversMap[modelName].prototype;
    const resolverActionsConfig = resolversEnhanceMap[modelName]!;
    const actionResolversConfig = actionResolversMap[modelName];
    const allActionsDecorators = resolverActionsConfig._all;
    const resolverActionNames =
      crudResolversInfo[modelName as keyof typeof crudResolversInfo];
    for (const resolverActionName of resolverActionNames) {
      const maybeDecoratorsOrFn = resolverActionsConfig[
        resolverActionName as keyof typeof resolverActionsConfig
      ] as MethodDecorator[] | MethodDecoratorOverrideFn | undefined;
      const isWriteOperation = mutationOperationPrefixes.some((prefix) =>
        resolverActionName.startsWith(prefix),
      );
      const operationKindDecorators = isWriteOperation
        ? resolverActionsConfig._mutation
        : resolverActionsConfig._query;
      const mainDecorators = [
        ...(allActionsDecorators ?? []),
        ...(operationKindDecorators ?? []),
      ];
      let decorators: MethodDecorator[];
      if (typeof maybeDecoratorsOrFn === "function") {
        decorators = maybeDecoratorsOrFn(mainDecorators);
      } else {
        decorators = [...mainDecorators, ...(maybeDecoratorsOrFn ?? [])];
      }
      const actionTarget = (
        actionResolversConfig[
          resolverActionName as keyof typeof actionResolversConfig
        ] as Function
      ).prototype;
      tslib.__decorate(decorators, crudTarget, resolverActionName, null);
      tslib.__decorate(decorators, actionTarget, resolverActionName, null);
    }
  }
}

type ArgsTypesNames = keyof typeof argsTypes;

type ArgFieldNames<TArgsType extends ArgsTypesNames> = Exclude<
  keyof (typeof argsTypes)[TArgsType]["prototype"],
  number | symbol
>;

type ArgFieldsConfig<TArgsType extends ArgsTypesNames> = FieldsConfig<
  ArgFieldNames<TArgsType>
>;

export type ArgConfig<TArgsType extends ArgsTypesNames> = {
  class?: ClassDecorator[];
  fields?: ArgFieldsConfig<TArgsType>;
};

export type ArgsTypesEnhanceMap = {
  [TArgsType in ArgsTypesNames]?: ArgConfig<TArgsType>;
};

export function applyArgsTypesEnhanceMap(
  argsTypesEnhanceMap: ArgsTypesEnhanceMap,
) {
  for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
    const argsTypeName =
      argsTypesEnhanceMapKey as keyof typeof argsTypesEnhanceMap;
    const typeConfig = argsTypesEnhanceMap[argsTypeName]!;
    const typeClass = argsTypes[argsTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      argsInfo[argsTypeName as keyof typeof argsInfo],
    );
  }
}

const relationResolversMap = {
  User: relationResolvers.UserRelationsResolver,
  Post: relationResolvers.PostRelationsResolver,
  Profile: relationResolvers.ProfileRelationsResolver,
  Comment: relationResolvers.CommentRelationsResolver,
  Like: relationResolvers.LikeRelationsResolver,
  Tag: relationResolvers.TagRelationsResolver,
  Image: relationResolvers.ImageRelationsResolver,
  Category: relationResolvers.CategoryRelationsResolver,
  Video: relationResolvers.VideoRelationsResolver,
  Audio: relationResolvers.AudioRelationsResolver,
  File: relationResolvers.FileRelationsResolver,
  Link: relationResolvers.LinkRelationsResolver,
  Poll: relationResolvers.PollRelationsResolver,
  Question: relationResolvers.QuestionRelationsResolver,
  Answer: relationResolvers.AnswerRelationsResolver,
  Quote: relationResolvers.QuoteRelationsResolver,
  Code: relationResolvers.CodeRelationsResolver,
};
const relationResolversInfo = {
  User: ["posts", "profile", "comments", "likes", "answers"],
  Post: [
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  Profile: ["user"],
  Comment: ["post", "author"],
  Like: ["post", "author"],
  Tag: ["posts"],
  Image: ["post"],
  Category: ["posts"],
  Video: ["post"],
  Audio: ["post"],
  File: ["post"],
  Link: ["post"],
  Poll: ["post"],
  Question: ["post", "Answer"],
  Answer: ["question", "author"],
  Quote: ["post"],
  Code: ["post"],
};

type RelationResolverModelNames = keyof typeof relationResolversMap;

type RelationResolverActionNames<TModel extends RelationResolverModelNames> =
  keyof (typeof relationResolversMap)[TModel]["prototype"];

export type RelationResolverActionsConfig<
  TModel extends RelationResolverModelNames,
> = Partial<
  Record<
    RelationResolverActionNames<TModel>,
    MethodDecorator[] | MethodDecoratorOverrideFn
  >
> & { _all?: MethodDecorator[] };

export type RelationResolversEnhanceMap = {
  [TModel in RelationResolverModelNames]?: RelationResolverActionsConfig<TModel>;
};

export function applyRelationResolversEnhanceMap(
  relationResolversEnhanceMap: RelationResolversEnhanceMap,
) {
  for (const relationResolversEnhanceMapKey of Object.keys(
    relationResolversEnhanceMap,
  )) {
    const modelName =
      relationResolversEnhanceMapKey as keyof typeof relationResolversEnhanceMap;
    const relationResolverTarget = relationResolversMap[modelName].prototype;
    const relationResolverActionsConfig =
      relationResolversEnhanceMap[modelName]!;
    const allActionsDecorators = relationResolverActionsConfig._all ?? [];
    const relationResolverActionNames =
      relationResolversInfo[modelName as keyof typeof relationResolversInfo];
    for (const relationResolverActionName of relationResolverActionNames) {
      const maybeDecoratorsOrFn = relationResolverActionsConfig[
        relationResolverActionName as keyof typeof relationResolverActionsConfig
      ] as MethodDecorator[] | MethodDecoratorOverrideFn | undefined;
      let decorators: MethodDecorator[];
      if (typeof maybeDecoratorsOrFn === "function") {
        decorators = maybeDecoratorsOrFn(allActionsDecorators);
      } else {
        decorators = [...allActionsDecorators, ...(maybeDecoratorsOrFn ?? [])];
      }
      tslib.__decorate(
        decorators,
        relationResolverTarget,
        relationResolverActionName,
        null,
      );
    }
  }
}

type TypeConfig = {
  class?: ClassDecorator[];
  fields?: FieldsConfig;
};

export type PropertyDecoratorOverrideFn = (
  decorators: PropertyDecorator[],
) => PropertyDecorator[];

type FieldsConfig<TTypeKeys extends string = string> = Partial<
  Record<TTypeKeys, PropertyDecorator[] | PropertyDecoratorOverrideFn>
> & { _all?: PropertyDecorator[] };

function applyTypeClassEnhanceConfig<
  TEnhanceConfig extends TypeConfig,
  TType extends object,
>(
  enhanceConfig: TEnhanceConfig,
  typeClass: ClassType<TType>,
  typePrototype: TType,
  typeFieldNames: string[],
) {
  if (enhanceConfig.class) {
    tslib.__decorate(enhanceConfig.class, typeClass);
  }
  if (enhanceConfig.fields) {
    const allFieldsDecorators = enhanceConfig.fields._all ?? [];
    for (const typeFieldName of typeFieldNames) {
      const maybeDecoratorsOrFn = enhanceConfig.fields[typeFieldName] as
        | PropertyDecorator[]
        | PropertyDecoratorOverrideFn
        | undefined;
      let decorators: PropertyDecorator[];
      if (typeof maybeDecoratorsOrFn === "function") {
        decorators = maybeDecoratorsOrFn(allFieldsDecorators);
      } else {
        decorators = [...allFieldsDecorators, ...(maybeDecoratorsOrFn ?? [])];
      }
      tslib.__decorate(decorators, typePrototype, typeFieldName, void 0);
    }
  }
}

const modelsInfo = {
  User: ["id", "createdAt", "updatedAt", "email", "name"],
  Post: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "authorId",
  ],
  Profile: ["id", "createdAt", "updatedAt", "bio", "userId"],
  Comment: ["id", "createdAt", "updatedAt", "content", "postId", "authorId"],
  Like: ["id", "createdAt", "updatedAt", "postId", "authorId"],
  Tag: ["id", "createdAt", "updatedAt", "name"],
  Image: ["id", "createdAt", "updatedAt", "url", "postId"],
  Category: ["id", "createdAt", "updatedAt", "name"],
  Video: ["id", "createdAt", "updatedAt", "url", "postId"],
  Audio: ["id", "createdAt", "updatedAt", "url", "postId"],
  File: ["id", "createdAt", "updatedAt", "url", "postId"],
  Link: ["id", "createdAt", "updatedAt", "url", "postId"],
  Poll: ["id", "createdAt", "updatedAt", "question", "options", "postId"],
  Question: ["id", "createdAt", "updatedAt", "question", "options", "postId"],
  Answer: ["id", "createdAt", "updatedAt", "content", "questionId", "authorId"],
  Quote: ["id", "createdAt", "updatedAt", "content", "author", "postId"],
  Code: ["id", "createdAt", "updatedAt", "content", "language", "postId"],
};

type ModelNames = keyof typeof models;

type ModelFieldNames<TModel extends ModelNames> = Exclude<
  keyof (typeof models)[TModel]["prototype"],
  number | symbol
>;

type ModelFieldsConfig<TModel extends ModelNames> = FieldsConfig<
  ModelFieldNames<TModel>
>;

export type ModelConfig<TModel extends ModelNames> = {
  class?: ClassDecorator[];
  fields?: ModelFieldsConfig<TModel>;
};

export type ModelsEnhanceMap = {
  [TModel in ModelNames]?: ModelConfig<TModel>;
};

export function applyModelsEnhanceMap(modelsEnhanceMap: ModelsEnhanceMap) {
  for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
    const modelName = modelsEnhanceMapKey as keyof typeof modelsEnhanceMap;
    const modelConfig = modelsEnhanceMap[modelName]!;
    const modelClass = models[modelName];
    const modelTarget = modelClass.prototype;
    applyTypeClassEnhanceConfig(
      modelConfig,
      modelClass,
      modelTarget,
      modelsInfo[modelName as keyof typeof modelsInfo],
    );
  }
}

const outputsInfo = {
  AggregateUser: ["_count", "_min", "_max"],
  UserGroupBy: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
    "_count",
    "_min",
    "_max",
  ],
  AggregatePost: ["_count", "_min", "_max"],
  PostGroupBy: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "authorId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateProfile: ["_count", "_min", "_max"],
  ProfileGroupBy: [
    "id",
    "createdAt",
    "updatedAt",
    "bio",
    "userId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateComment: ["_count", "_min", "_max"],
  CommentGroupBy: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "postId",
    "authorId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateLike: ["_count", "_min", "_max"],
  LikeGroupBy: [
    "id",
    "createdAt",
    "updatedAt",
    "postId",
    "authorId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateTag: ["_count", "_min", "_max"],
  TagGroupBy: [
    "id",
    "createdAt",
    "updatedAt",
    "name",
    "_count",
    "_min",
    "_max",
  ],
  AggregateImage: ["_count", "_min", "_max"],
  ImageGroupBy: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateCategory: ["_count", "_min", "_max"],
  CategoryGroupBy: [
    "id",
    "createdAt",
    "updatedAt",
    "name",
    "_count",
    "_min",
    "_max",
  ],
  AggregateVideo: ["_count", "_min", "_max"],
  VideoGroupBy: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateAudio: ["_count", "_min", "_max"],
  AudioGroupBy: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateFile: ["_count", "_min", "_max"],
  FileGroupBy: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateLink: ["_count", "_min", "_max"],
  LinkGroupBy: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "_count",
    "_min",
    "_max",
  ],
  AggregatePoll: ["_count", "_min", "_max"],
  PollGroupBy: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateQuestion: ["_count", "_min", "_max"],
  QuestionGroupBy: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateAnswer: ["_count", "_min", "_max"],
  AnswerGroupBy: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "questionId",
    "authorId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateQuote: ["_count", "_min", "_max"],
  QuoteGroupBy: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
    "postId",
    "_count",
    "_min",
    "_max",
  ],
  AggregateCode: ["_count", "_min", "_max"],
  CodeGroupBy: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
    "postId",
    "_count",
    "_min",
    "_max",
  ],
  AffectedRowsOutput: ["count"],
  UserCount: ["posts", "comments", "likes", "answers"],
  UserCountAggregate: ["id", "createdAt", "updatedAt", "email", "name", "_all"],
  UserMinAggregate: ["id", "createdAt", "updatedAt", "email", "name"],
  UserMaxAggregate: ["id", "createdAt", "updatedAt", "email", "name"],
  PostCount: [
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostCountAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "authorId",
    "_all",
  ],
  PostMinAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "authorId",
  ],
  PostMaxAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "authorId",
  ],
  ProfileCountAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "bio",
    "userId",
    "_all",
  ],
  ProfileMinAggregate: ["id", "createdAt", "updatedAt", "bio", "userId"],
  ProfileMaxAggregate: ["id", "createdAt", "updatedAt", "bio", "userId"],
  CommentCountAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "postId",
    "authorId",
    "_all",
  ],
  CommentMinAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "postId",
    "authorId",
  ],
  CommentMaxAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "postId",
    "authorId",
  ],
  LikeCountAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "postId",
    "authorId",
    "_all",
  ],
  LikeMinAggregate: ["id", "createdAt", "updatedAt", "postId", "authorId"],
  LikeMaxAggregate: ["id", "createdAt", "updatedAt", "postId", "authorId"],
  TagCount: ["posts"],
  TagCountAggregate: ["id", "createdAt", "updatedAt", "name", "_all"],
  TagMinAggregate: ["id", "createdAt", "updatedAt", "name"],
  TagMaxAggregate: ["id", "createdAt", "updatedAt", "name"],
  ImageCountAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "_all",
  ],
  ImageMinAggregate: ["id", "createdAt", "updatedAt", "url", "postId"],
  ImageMaxAggregate: ["id", "createdAt", "updatedAt", "url", "postId"],
  CategoryCount: ["posts"],
  CategoryCountAggregate: ["id", "createdAt", "updatedAt", "name", "_all"],
  CategoryMinAggregate: ["id", "createdAt", "updatedAt", "name"],
  CategoryMaxAggregate: ["id", "createdAt", "updatedAt", "name"],
  VideoCountAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "_all",
  ],
  VideoMinAggregate: ["id", "createdAt", "updatedAt", "url", "postId"],
  VideoMaxAggregate: ["id", "createdAt", "updatedAt", "url", "postId"],
  AudioCountAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "_all",
  ],
  AudioMinAggregate: ["id", "createdAt", "updatedAt", "url", "postId"],
  AudioMaxAggregate: ["id", "createdAt", "updatedAt", "url", "postId"],
  FileCountAggregate: ["id", "createdAt", "updatedAt", "url", "postId", "_all"],
  FileMinAggregate: ["id", "createdAt", "updatedAt", "url", "postId"],
  FileMaxAggregate: ["id", "createdAt", "updatedAt", "url", "postId"],
  LinkCountAggregate: ["id", "createdAt", "updatedAt", "url", "postId", "_all"],
  LinkMinAggregate: ["id", "createdAt", "updatedAt", "url", "postId"],
  LinkMaxAggregate: ["id", "createdAt", "updatedAt", "url", "postId"],
  PollCountAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
    "_all",
  ],
  PollMinAggregate: ["id", "createdAt", "updatedAt", "question", "postId"],
  PollMaxAggregate: ["id", "createdAt", "updatedAt", "question", "postId"],
  QuestionCount: ["Answer"],
  QuestionCountAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
    "_all",
  ],
  QuestionMinAggregate: ["id", "createdAt", "updatedAt", "question", "postId"],
  QuestionMaxAggregate: ["id", "createdAt", "updatedAt", "question", "postId"],
  AnswerCountAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "questionId",
    "authorId",
    "_all",
  ],
  AnswerMinAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "questionId",
    "authorId",
  ],
  AnswerMaxAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "questionId",
    "authorId",
  ],
  QuoteCountAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
    "postId",
    "_all",
  ],
  QuoteMinAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
    "postId",
  ],
  QuoteMaxAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
    "postId",
  ],
  CodeCountAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
    "postId",
    "_all",
  ],
  CodeMinAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
    "postId",
  ],
  CodeMaxAggregate: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
    "postId",
  ],
};

type OutputTypesNames = keyof typeof outputTypes;

type OutputTypeFieldNames<TOutput extends OutputTypesNames> = Exclude<
  keyof (typeof outputTypes)[TOutput]["prototype"],
  number | symbol
>;

type OutputTypeFieldsConfig<TOutput extends OutputTypesNames> = FieldsConfig<
  OutputTypeFieldNames<TOutput>
>;

export type OutputTypeConfig<TOutput extends OutputTypesNames> = {
  class?: ClassDecorator[];
  fields?: OutputTypeFieldsConfig<TOutput>;
};

export type OutputTypesEnhanceMap = {
  [TOutput in OutputTypesNames]?: OutputTypeConfig<TOutput>;
};

export function applyOutputTypesEnhanceMap(
  outputTypesEnhanceMap: OutputTypesEnhanceMap,
) {
  for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
    const outputTypeName =
      outputTypeEnhanceMapKey as keyof typeof outputTypesEnhanceMap;
    const typeConfig = outputTypesEnhanceMap[outputTypeName]!;
    const typeClass = outputTypes[outputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      outputsInfo[outputTypeName as keyof typeof outputsInfo],
    );
  }
}

const inputsInfo = {
  UserWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
    "posts",
    "profile",
    "comments",
    "likes",
    "answers",
  ],
  UserOrderByWithRelationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
    "posts",
    "profile",
    "comments",
    "likes",
    "answers",
  ],
  UserWhereUniqueInput: [
    "id",
    "email",
    "AND",
    "OR",
    "NOT",
    "createdAt",
    "updatedAt",
    "name",
    "posts",
    "profile",
    "comments",
    "likes",
    "answers",
  ],
  UserOrderByWithAggregationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
    "_count",
    "_max",
    "_min",
  ],
  UserScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
  ],
  PostWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "authorId",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostOrderByWithRelationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "authorId",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostWhereUniqueInput: [
    "id",
    "AND",
    "OR",
    "NOT",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "authorId",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostOrderByWithAggregationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "authorId",
    "_count",
    "_max",
    "_min",
  ],
  PostScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "authorId",
  ],
  ProfileWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "bio",
    "userId",
    "user",
  ],
  ProfileOrderByWithRelationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "bio",
    "userId",
    "user",
  ],
  ProfileWhereUniqueInput: [
    "id",
    "userId",
    "AND",
    "OR",
    "NOT",
    "createdAt",
    "updatedAt",
    "bio",
    "user",
  ],
  ProfileOrderByWithAggregationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "bio",
    "userId",
    "_count",
    "_max",
    "_min",
  ],
  ProfileScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "bio",
    "userId",
  ],
  CommentWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "postId",
    "authorId",
    "post",
    "author",
  ],
  CommentOrderByWithRelationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "postId",
    "authorId",
    "post",
    "author",
  ],
  CommentWhereUniqueInput: [
    "id",
    "AND",
    "OR",
    "NOT",
    "createdAt",
    "updatedAt",
    "content",
    "postId",
    "authorId",
    "post",
    "author",
  ],
  CommentOrderByWithAggregationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "postId",
    "authorId",
    "_count",
    "_max",
    "_min",
  ],
  CommentScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "postId",
    "authorId",
  ],
  LikeWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "postId",
    "authorId",
    "post",
    "author",
  ],
  LikeOrderByWithRelationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "postId",
    "authorId",
    "post",
    "author",
  ],
  LikeWhereUniqueInput: [
    "id",
    "AND",
    "OR",
    "NOT",
    "createdAt",
    "updatedAt",
    "postId",
    "authorId",
    "post",
    "author",
  ],
  LikeOrderByWithAggregationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "postId",
    "authorId",
    "_count",
    "_max",
    "_min",
  ],
  LikeScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "postId",
    "authorId",
  ],
  TagWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "name",
    "posts",
  ],
  TagOrderByWithRelationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "name",
    "posts",
  ],
  TagWhereUniqueInput: [
    "id",
    "name",
    "AND",
    "OR",
    "NOT",
    "createdAt",
    "updatedAt",
    "posts",
  ],
  TagOrderByWithAggregationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "name",
    "_count",
    "_max",
    "_min",
  ],
  TagScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "name",
  ],
  ImageWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "post",
  ],
  ImageOrderByWithRelationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "post",
  ],
  ImageWhereUniqueInput: [
    "id",
    "url",
    "AND",
    "OR",
    "NOT",
    "createdAt",
    "updatedAt",
    "postId",
    "post",
  ],
  ImageOrderByWithAggregationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "_count",
    "_max",
    "_min",
  ],
  ImageScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  CategoryWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "name",
    "posts",
  ],
  CategoryOrderByWithRelationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "name",
    "posts",
  ],
  CategoryWhereUniqueInput: [
    "id",
    "name",
    "AND",
    "OR",
    "NOT",
    "createdAt",
    "updatedAt",
    "posts",
  ],
  CategoryOrderByWithAggregationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "name",
    "_count",
    "_max",
    "_min",
  ],
  CategoryScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "name",
  ],
  VideoWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "post",
  ],
  VideoOrderByWithRelationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "post",
  ],
  VideoWhereUniqueInput: [
    "id",
    "url",
    "AND",
    "OR",
    "NOT",
    "createdAt",
    "updatedAt",
    "postId",
    "post",
  ],
  VideoOrderByWithAggregationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "_count",
    "_max",
    "_min",
  ],
  VideoScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  AudioWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "post",
  ],
  AudioOrderByWithRelationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "post",
  ],
  AudioWhereUniqueInput: [
    "id",
    "url",
    "AND",
    "OR",
    "NOT",
    "createdAt",
    "updatedAt",
    "postId",
    "post",
  ],
  AudioOrderByWithAggregationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "_count",
    "_max",
    "_min",
  ],
  AudioScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  FileWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "post",
  ],
  FileOrderByWithRelationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "post",
  ],
  FileWhereUniqueInput: [
    "id",
    "url",
    "AND",
    "OR",
    "NOT",
    "createdAt",
    "updatedAt",
    "postId",
    "post",
  ],
  FileOrderByWithAggregationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "_count",
    "_max",
    "_min",
  ],
  FileScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  LinkWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "post",
  ],
  LinkOrderByWithRelationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "post",
  ],
  LinkWhereUniqueInput: [
    "id",
    "url",
    "AND",
    "OR",
    "NOT",
    "createdAt",
    "updatedAt",
    "postId",
    "post",
  ],
  LinkOrderByWithAggregationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
    "_count",
    "_max",
    "_min",
  ],
  LinkScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  PollWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
    "post",
  ],
  PollOrderByWithRelationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
    "post",
  ],
  PollWhereUniqueInput: [
    "id",
    "AND",
    "OR",
    "NOT",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
    "post",
  ],
  PollOrderByWithAggregationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
    "_count",
    "_max",
    "_min",
  ],
  PollScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
  ],
  QuestionWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
    "post",
    "Answer",
  ],
  QuestionOrderByWithRelationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
    "post",
    "Answer",
  ],
  QuestionWhereUniqueInput: [
    "id",
    "AND",
    "OR",
    "NOT",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
    "post",
    "Answer",
  ],
  QuestionOrderByWithAggregationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
    "_count",
    "_max",
    "_min",
  ],
  QuestionScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
  ],
  AnswerWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "questionId",
    "authorId",
    "question",
    "author",
  ],
  AnswerOrderByWithRelationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "questionId",
    "authorId",
    "question",
    "author",
  ],
  AnswerWhereUniqueInput: [
    "id",
    "AND",
    "OR",
    "NOT",
    "createdAt",
    "updatedAt",
    "content",
    "questionId",
    "authorId",
    "question",
    "author",
  ],
  AnswerOrderByWithAggregationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "questionId",
    "authorId",
    "_count",
    "_max",
    "_min",
  ],
  AnswerScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "questionId",
    "authorId",
  ],
  QuoteWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
    "postId",
    "post",
  ],
  QuoteOrderByWithRelationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
    "postId",
    "post",
  ],
  QuoteWhereUniqueInput: [
    "id",
    "AND",
    "OR",
    "NOT",
    "createdAt",
    "updatedAt",
    "content",
    "author",
    "postId",
    "post",
  ],
  QuoteOrderByWithAggregationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
    "postId",
    "_count",
    "_max",
    "_min",
  ],
  QuoteScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
    "postId",
  ],
  CodeWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
    "postId",
    "post",
  ],
  CodeOrderByWithRelationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
    "postId",
    "post",
  ],
  CodeWhereUniqueInput: [
    "id",
    "AND",
    "OR",
    "NOT",
    "createdAt",
    "updatedAt",
    "content",
    "language",
    "postId",
    "post",
  ],
  CodeOrderByWithAggregationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
    "postId",
    "_count",
    "_max",
    "_min",
  ],
  CodeScalarWhereWithAggregatesInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
    "postId",
  ],
  UserCreateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
    "posts",
    "profile",
    "comments",
    "likes",
    "answers",
  ],
  UserUpdateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
    "posts",
    "profile",
    "comments",
    "likes",
    "answers",
  ],
  UserCreateManyInput: ["id", "createdAt", "updatedAt", "email", "name"],
  UserUpdateManyMutationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
  ],
  PostCreateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostUpdateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateManyInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "authorId",
  ],
  PostUpdateManyMutationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
  ],
  ProfileCreateInput: ["id", "createdAt", "updatedAt", "bio", "user"],
  ProfileUpdateInput: ["id", "createdAt", "updatedAt", "bio", "user"],
  ProfileCreateManyInput: ["id", "createdAt", "updatedAt", "bio", "userId"],
  ProfileUpdateManyMutationInput: ["id", "createdAt", "updatedAt", "bio"],
  CommentCreateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "post",
    "author",
  ],
  CommentUpdateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "post",
    "author",
  ],
  CommentCreateManyInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "postId",
    "authorId",
  ],
  CommentUpdateManyMutationInput: ["id", "createdAt", "updatedAt", "content"],
  LikeCreateInput: ["id", "createdAt", "updatedAt", "post", "author"],
  LikeUpdateInput: ["id", "createdAt", "updatedAt", "post", "author"],
  LikeCreateManyInput: ["id", "createdAt", "updatedAt", "postId", "authorId"],
  LikeUpdateManyMutationInput: ["id", "createdAt", "updatedAt"],
  TagCreateInput: ["id", "createdAt", "updatedAt", "name", "posts"],
  TagUpdateInput: ["id", "createdAt", "updatedAt", "name", "posts"],
  TagCreateManyInput: ["id", "createdAt", "updatedAt", "name"],
  TagUpdateManyMutationInput: ["id", "createdAt", "updatedAt", "name"],
  ImageCreateInput: ["id", "createdAt", "updatedAt", "url", "post"],
  ImageUpdateInput: ["id", "createdAt", "updatedAt", "url", "post"],
  ImageCreateManyInput: ["id", "createdAt", "updatedAt", "url", "postId"],
  ImageUpdateManyMutationInput: ["id", "createdAt", "updatedAt", "url"],
  CategoryCreateInput: ["id", "createdAt", "updatedAt", "name", "posts"],
  CategoryUpdateInput: ["id", "createdAt", "updatedAt", "name", "posts"],
  CategoryCreateManyInput: ["id", "createdAt", "updatedAt", "name"],
  CategoryUpdateManyMutationInput: ["id", "createdAt", "updatedAt", "name"],
  VideoCreateInput: ["id", "createdAt", "updatedAt", "url", "post"],
  VideoUpdateInput: ["id", "createdAt", "updatedAt", "url", "post"],
  VideoCreateManyInput: ["id", "createdAt", "updatedAt", "url", "postId"],
  VideoUpdateManyMutationInput: ["id", "createdAt", "updatedAt", "url"],
  AudioCreateInput: ["id", "createdAt", "updatedAt", "url", "post"],
  AudioUpdateInput: ["id", "createdAt", "updatedAt", "url", "post"],
  AudioCreateManyInput: ["id", "createdAt", "updatedAt", "url", "postId"],
  AudioUpdateManyMutationInput: ["id", "createdAt", "updatedAt", "url"],
  FileCreateInput: ["id", "createdAt", "updatedAt", "url", "post"],
  FileUpdateInput: ["id", "createdAt", "updatedAt", "url", "post"],
  FileCreateManyInput: ["id", "createdAt", "updatedAt", "url", "postId"],
  FileUpdateManyMutationInput: ["id", "createdAt", "updatedAt", "url"],
  LinkCreateInput: ["id", "createdAt", "updatedAt", "url", "post"],
  LinkUpdateInput: ["id", "createdAt", "updatedAt", "url", "post"],
  LinkCreateManyInput: ["id", "createdAt", "updatedAt", "url", "postId"],
  LinkUpdateManyMutationInput: ["id", "createdAt", "updatedAt", "url"],
  PollCreateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "post",
  ],
  PollUpdateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "post",
  ],
  PollCreateManyInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
  ],
  PollUpdateManyMutationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
  ],
  QuestionCreateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "post",
    "Answer",
  ],
  QuestionUpdateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "post",
    "Answer",
  ],
  QuestionCreateManyInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
  ],
  QuestionUpdateManyMutationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
  ],
  AnswerCreateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "question",
    "author",
  ],
  AnswerUpdateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "question",
    "author",
  ],
  AnswerCreateManyInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "questionId",
    "authorId",
  ],
  AnswerUpdateManyMutationInput: ["id", "createdAt", "updatedAt", "content"],
  QuoteCreateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
    "post",
  ],
  QuoteUpdateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
    "post",
  ],
  QuoteCreateManyInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
    "postId",
  ],
  QuoteUpdateManyMutationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
  ],
  CodeCreateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
    "post",
  ],
  CodeUpdateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
    "post",
  ],
  CodeCreateManyInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
    "postId",
  ],
  CodeUpdateManyMutationInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
  ],
  StringFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "mode",
    "not",
  ],
  DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  StringNullableFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "mode",
    "not",
  ],
  PostListRelationFilter: ["every", "some", "none"],
  ProfileNullableRelationFilter: ["is", "isNot"],
  CommentListRelationFilter: ["every", "some", "none"],
  LikeListRelationFilter: ["every", "some", "none"],
  AnswerListRelationFilter: ["every", "some", "none"],
  SortOrderInput: ["sort", "nulls"],
  PostOrderByRelationAggregateInput: ["_count"],
  CommentOrderByRelationAggregateInput: ["_count"],
  LikeOrderByRelationAggregateInput: ["_count"],
  AnswerOrderByRelationAggregateInput: ["_count"],
  UserCountOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
  ],
  UserMaxOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
  ],
  UserMinOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
  ],
  StringWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "mode",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  DateTimeWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  StringNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "mode",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  BoolFilter: ["equals", "not"],
  UserNullableRelationFilter: ["is", "isNot"],
  TagListRelationFilter: ["every", "some", "none"],
  ImageListRelationFilter: ["every", "some", "none"],
  CategoryListRelationFilter: ["every", "some", "none"],
  VideoListRelationFilter: ["every", "some", "none"],
  AudioListRelationFilter: ["every", "some", "none"],
  FileListRelationFilter: ["every", "some", "none"],
  LinkListRelationFilter: ["every", "some", "none"],
  PollListRelationFilter: ["every", "some", "none"],
  QuestionListRelationFilter: ["every", "some", "none"],
  QuoteListRelationFilter: ["every", "some", "none"],
  CodeListRelationFilter: ["every", "some", "none"],
  TagOrderByRelationAggregateInput: ["_count"],
  ImageOrderByRelationAggregateInput: ["_count"],
  CategoryOrderByRelationAggregateInput: ["_count"],
  VideoOrderByRelationAggregateInput: ["_count"],
  AudioOrderByRelationAggregateInput: ["_count"],
  FileOrderByRelationAggregateInput: ["_count"],
  LinkOrderByRelationAggregateInput: ["_count"],
  PollOrderByRelationAggregateInput: ["_count"],
  QuestionOrderByRelationAggregateInput: ["_count"],
  QuoteOrderByRelationAggregateInput: ["_count"],
  CodeOrderByRelationAggregateInput: ["_count"],
  PostCountOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "authorId",
  ],
  PostMaxOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "authorId",
  ],
  PostMinOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "authorId",
  ],
  BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  UserRelationFilter: ["is", "isNot"],
  ProfileCountOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "bio",
    "userId",
  ],
  ProfileMaxOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "bio",
    "userId",
  ],
  ProfileMinOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "bio",
    "userId",
  ],
  PostRelationFilter: ["is", "isNot"],
  CommentCountOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "postId",
    "authorId",
  ],
  CommentMaxOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "postId",
    "authorId",
  ],
  CommentMinOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "postId",
    "authorId",
  ],
  LikeCountOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "postId",
    "authorId",
  ],
  LikeMaxOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "postId",
    "authorId",
  ],
  LikeMinOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "postId",
    "authorId",
  ],
  TagCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  TagMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  TagMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  ImageCountOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  ImageMaxOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  ImageMinOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  CategoryCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  CategoryMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  CategoryMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name"],
  VideoCountOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  VideoMaxOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  VideoMinOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  AudioCountOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  AudioMaxOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  AudioMinOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  FileCountOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  FileMaxOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  FileMinOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  LinkCountOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  LinkMaxOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  LinkMinOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  StringNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
  PollCountOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
  ],
  PollMaxOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "postId",
  ],
  PollMinOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "postId",
  ],
  QuestionCountOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
  ],
  QuestionMaxOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "postId",
  ],
  QuestionMinOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "postId",
  ],
  QuestionRelationFilter: ["is", "isNot"],
  AnswerCountOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "questionId",
    "authorId",
  ],
  AnswerMaxOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "questionId",
    "authorId",
  ],
  AnswerMinOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "questionId",
    "authorId",
  ],
  QuoteCountOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
    "postId",
  ],
  QuoteMaxOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
    "postId",
  ],
  QuoteMinOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
    "postId",
  ],
  CodeCountOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
    "postId",
  ],
  CodeMaxOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
    "postId",
  ],
  CodeMinOrderByAggregateInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
    "postId",
  ],
  PostCreateNestedManyWithoutAuthorInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  ProfileCreateNestedOneWithoutUserInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  CommentCreateNestedManyWithoutAuthorInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  LikeCreateNestedManyWithoutAuthorInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  AnswerCreateNestedManyWithoutAuthorInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  StringFieldUpdateOperationsInput: ["set"],
  DateTimeFieldUpdateOperationsInput: ["set"],
  NullableStringFieldUpdateOperationsInput: ["set"],
  PostUpdateManyWithoutAuthorNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  ProfileUpdateOneWithoutUserNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  CommentUpdateManyWithoutAuthorNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  LikeUpdateManyWithoutAuthorNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  AnswerUpdateManyWithoutAuthorNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  UserCreateNestedOneWithoutPostsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  TagCreateNestedManyWithoutPostsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  ImageCreateNestedManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  CategoryCreateNestedManyWithoutPostsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  VideoCreateNestedManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  AudioCreateNestedManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  FileCreateNestedManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  LinkCreateNestedManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  PollCreateNestedManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  QuestionCreateNestedManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  QuoteCreateNestedManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  CodeCreateNestedManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  CommentCreateNestedManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  LikeCreateNestedManyWithoutPostInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  BoolFieldUpdateOperationsInput: ["set"],
  UserUpdateOneWithoutPostsNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "disconnect",
    "delete",
    "connect",
    "update",
  ],
  TagUpdateManyWithoutPostsNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  ImageUpdateManyWithoutPostNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  CategoryUpdateManyWithoutPostsNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  VideoUpdateManyWithoutPostNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  AudioUpdateManyWithoutPostNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  FileUpdateManyWithoutPostNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  LinkUpdateManyWithoutPostNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  PollUpdateManyWithoutPostNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  QuestionUpdateManyWithoutPostNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  QuoteUpdateManyWithoutPostNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  CodeUpdateManyWithoutPostNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  CommentUpdateManyWithoutPostNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  LikeUpdateManyWithoutPostNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  UserCreateNestedOneWithoutProfileInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserUpdateOneRequiredWithoutProfileNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PostCreateNestedOneWithoutCommentsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserCreateNestedOneWithoutCommentsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostUpdateOneRequiredWithoutCommentsNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserUpdateOneRequiredWithoutCommentsNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PostCreateNestedOneWithoutLikesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserCreateNestedOneWithoutLikesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostUpdateOneRequiredWithoutLikesNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserUpdateOneRequiredWithoutLikesNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PostCreateNestedManyWithoutTagsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostUpdateManyWithoutTagsNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  PostCreateNestedOneWithoutImagesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostUpdateOneRequiredWithoutImagesNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PostCreateNestedManyWithoutCategoriesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostUpdateManyWithoutCategoriesNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  PostCreateNestedOneWithoutVideosInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostUpdateOneRequiredWithoutVideosNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PostCreateNestedOneWithoutAudiosInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostUpdateOneRequiredWithoutAudiosNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PostCreateNestedOneWithoutFilesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostUpdateOneRequiredWithoutFilesNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PostCreateNestedOneWithoutLinksInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostUpdateOneRequiredWithoutLinksNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PollCreateoptionsInput: ["set"],
  PostCreateNestedOneWithoutPollsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PollUpdateoptionsInput: ["set", "push"],
  PostUpdateOneRequiredWithoutPollsNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  QuestionCreateoptionsInput: ["set"],
  PostCreateNestedOneWithoutQuestionsInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  AnswerCreateNestedManyWithoutQuestionInput: [
    "create",
    "connectOrCreate",
    "createMany",
    "connect",
  ],
  QuestionUpdateoptionsInput: ["set", "push"],
  PostUpdateOneRequiredWithoutQuestionsNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  AnswerUpdateManyWithoutQuestionNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "createMany",
    "set",
    "disconnect",
    "delete",
    "connect",
    "update",
    "updateMany",
    "deleteMany",
  ],
  QuestionCreateNestedOneWithoutAnswerInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  UserCreateNestedOneWithoutAnswersInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  QuestionUpdateOneRequiredWithoutAnswerNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  UserUpdateOneRequiredWithoutAnswersNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PostCreateNestedOneWithoutQuotesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostUpdateOneRequiredWithoutQuotesNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  PostCreateNestedOneWithoutCodesInput: [
    "create",
    "connectOrCreate",
    "connect",
  ],
  PostUpdateOneRequiredWithoutCodesNestedInput: [
    "create",
    "connectOrCreate",
    "upsert",
    "connect",
    "update",
  ],
  NestedStringFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
  ],
  NestedDateTimeFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
  ],
  NestedStringNullableFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
  ],
  NestedStringWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedDateTimeWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedStringNullableWithAggregatesFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "contains",
    "startsWith",
    "endsWith",
    "not",
    "_count",
    "_min",
    "_max",
  ],
  NestedIntNullableFilter: [
    "equals",
    "in",
    "notIn",
    "lt",
    "lte",
    "gt",
    "gte",
    "not",
  ],
  NestedBoolFilter: ["equals", "not"],
  NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  PostCreateWithoutAuthorInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateOrConnectWithoutAuthorInput: ["where", "create"],
  PostCreateManyAuthorInputEnvelope: ["data", "skipDuplicates"],
  ProfileCreateWithoutUserInput: ["id", "createdAt", "updatedAt", "bio"],
  ProfileCreateOrConnectWithoutUserInput: ["where", "create"],
  CommentCreateWithoutAuthorInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "post",
  ],
  CommentCreateOrConnectWithoutAuthorInput: ["where", "create"],
  CommentCreateManyAuthorInputEnvelope: ["data", "skipDuplicates"],
  LikeCreateWithoutAuthorInput: ["id", "createdAt", "updatedAt", "post"],
  LikeCreateOrConnectWithoutAuthorInput: ["where", "create"],
  LikeCreateManyAuthorInputEnvelope: ["data", "skipDuplicates"],
  AnswerCreateWithoutAuthorInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "question",
  ],
  AnswerCreateOrConnectWithoutAuthorInput: ["where", "create"],
  AnswerCreateManyAuthorInputEnvelope: ["data", "skipDuplicates"],
  PostUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
  PostUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
  PostUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
  PostScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "authorId",
  ],
  ProfileUpsertWithoutUserInput: ["update", "create", "where"],
  ProfileUpdateToOneWithWhereWithoutUserInput: ["where", "data"],
  ProfileUpdateWithoutUserInput: ["id", "createdAt", "updatedAt", "bio"],
  CommentUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
  CommentUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
  CommentUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
  CommentScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "postId",
    "authorId",
  ],
  LikeUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
  LikeUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
  LikeUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
  LikeScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "postId",
    "authorId",
  ],
  AnswerUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
  AnswerUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
  AnswerUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
  AnswerScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "questionId",
    "authorId",
  ],
  UserCreateWithoutPostsInput: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
    "profile",
    "comments",
    "likes",
    "answers",
  ],
  UserCreateOrConnectWithoutPostsInput: ["where", "create"],
  TagCreateWithoutPostsInput: ["id", "createdAt", "updatedAt", "name"],
  TagCreateOrConnectWithoutPostsInput: ["where", "create"],
  ImageCreateWithoutPostInput: ["id", "createdAt", "updatedAt", "url"],
  ImageCreateOrConnectWithoutPostInput: ["where", "create"],
  ImageCreateManyPostInputEnvelope: ["data", "skipDuplicates"],
  CategoryCreateWithoutPostsInput: ["id", "createdAt", "updatedAt", "name"],
  CategoryCreateOrConnectWithoutPostsInput: ["where", "create"],
  VideoCreateWithoutPostInput: ["id", "createdAt", "updatedAt", "url"],
  VideoCreateOrConnectWithoutPostInput: ["where", "create"],
  VideoCreateManyPostInputEnvelope: ["data", "skipDuplicates"],
  AudioCreateWithoutPostInput: ["id", "createdAt", "updatedAt", "url"],
  AudioCreateOrConnectWithoutPostInput: ["where", "create"],
  AudioCreateManyPostInputEnvelope: ["data", "skipDuplicates"],
  FileCreateWithoutPostInput: ["id", "createdAt", "updatedAt", "url"],
  FileCreateOrConnectWithoutPostInput: ["where", "create"],
  FileCreateManyPostInputEnvelope: ["data", "skipDuplicates"],
  LinkCreateWithoutPostInput: ["id", "createdAt", "updatedAt", "url"],
  LinkCreateOrConnectWithoutPostInput: ["where", "create"],
  LinkCreateManyPostInputEnvelope: ["data", "skipDuplicates"],
  PollCreateWithoutPostInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
  ],
  PollCreateOrConnectWithoutPostInput: ["where", "create"],
  PollCreateManyPostInputEnvelope: ["data", "skipDuplicates"],
  QuestionCreateWithoutPostInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "Answer",
  ],
  QuestionCreateOrConnectWithoutPostInput: ["where", "create"],
  QuestionCreateManyPostInputEnvelope: ["data", "skipDuplicates"],
  QuoteCreateWithoutPostInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
  ],
  QuoteCreateOrConnectWithoutPostInput: ["where", "create"],
  QuoteCreateManyPostInputEnvelope: ["data", "skipDuplicates"],
  CodeCreateWithoutPostInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
  ],
  CodeCreateOrConnectWithoutPostInput: ["where", "create"],
  CodeCreateManyPostInputEnvelope: ["data", "skipDuplicates"],
  CommentCreateWithoutPostInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
  ],
  CommentCreateOrConnectWithoutPostInput: ["where", "create"],
  CommentCreateManyPostInputEnvelope: ["data", "skipDuplicates"],
  LikeCreateWithoutPostInput: ["id", "createdAt", "updatedAt", "author"],
  LikeCreateOrConnectWithoutPostInput: ["where", "create"],
  LikeCreateManyPostInputEnvelope: ["data", "skipDuplicates"],
  UserUpsertWithoutPostsInput: ["update", "create", "where"],
  UserUpdateToOneWithWhereWithoutPostsInput: ["where", "data"],
  UserUpdateWithoutPostsInput: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
    "profile",
    "comments",
    "likes",
    "answers",
  ],
  TagUpsertWithWhereUniqueWithoutPostsInput: ["where", "update", "create"],
  TagUpdateWithWhereUniqueWithoutPostsInput: ["where", "data"],
  TagUpdateManyWithWhereWithoutPostsInput: ["where", "data"],
  TagScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "name",
  ],
  ImageUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
  ImageUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
  ImageUpdateManyWithWhereWithoutPostInput: ["where", "data"],
  ImageScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  CategoryUpsertWithWhereUniqueWithoutPostsInput: ["where", "update", "create"],
  CategoryUpdateWithWhereUniqueWithoutPostsInput: ["where", "data"],
  CategoryUpdateManyWithWhereWithoutPostsInput: ["where", "data"],
  CategoryScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "name",
  ],
  VideoUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
  VideoUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
  VideoUpdateManyWithWhereWithoutPostInput: ["where", "data"],
  VideoScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  AudioUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
  AudioUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
  AudioUpdateManyWithWhereWithoutPostInput: ["where", "data"],
  AudioScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  FileUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
  FileUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
  FileUpdateManyWithWhereWithoutPostInput: ["where", "data"],
  FileScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  LinkUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
  LinkUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
  LinkUpdateManyWithWhereWithoutPostInput: ["where", "data"],
  LinkScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "url",
    "postId",
  ],
  PollUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
  PollUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
  PollUpdateManyWithWhereWithoutPostInput: ["where", "data"],
  PollScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
  ],
  QuestionUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
  QuestionUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
  QuestionUpdateManyWithWhereWithoutPostInput: ["where", "data"],
  QuestionScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "postId",
  ],
  QuoteUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
  QuoteUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
  QuoteUpdateManyWithWhereWithoutPostInput: ["where", "data"],
  QuoteScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
    "postId",
  ],
  CodeUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
  CodeUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
  CodeUpdateManyWithWhereWithoutPostInput: ["where", "data"],
  CodeScalarWhereInput: [
    "AND",
    "OR",
    "NOT",
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
    "postId",
  ],
  CommentUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
  CommentUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
  CommentUpdateManyWithWhereWithoutPostInput: ["where", "data"],
  LikeUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
  LikeUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
  LikeUpdateManyWithWhereWithoutPostInput: ["where", "data"],
  UserCreateWithoutProfileInput: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
    "posts",
    "comments",
    "likes",
    "answers",
  ],
  UserCreateOrConnectWithoutProfileInput: ["where", "create"],
  UserUpsertWithoutProfileInput: ["update", "create", "where"],
  UserUpdateToOneWithWhereWithoutProfileInput: ["where", "data"],
  UserUpdateWithoutProfileInput: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
    "posts",
    "comments",
    "likes",
    "answers",
  ],
  PostCreateWithoutCommentsInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "likes",
  ],
  PostCreateOrConnectWithoutCommentsInput: ["where", "create"],
  UserCreateWithoutCommentsInput: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
    "posts",
    "profile",
    "likes",
    "answers",
  ],
  UserCreateOrConnectWithoutCommentsInput: ["where", "create"],
  PostUpsertWithoutCommentsInput: ["update", "create", "where"],
  PostUpdateToOneWithWhereWithoutCommentsInput: ["where", "data"],
  PostUpdateWithoutCommentsInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "likes",
  ],
  UserUpsertWithoutCommentsInput: ["update", "create", "where"],
  UserUpdateToOneWithWhereWithoutCommentsInput: ["where", "data"],
  UserUpdateWithoutCommentsInput: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
    "posts",
    "profile",
    "likes",
    "answers",
  ],
  PostCreateWithoutLikesInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
  ],
  PostCreateOrConnectWithoutLikesInput: ["where", "create"],
  UserCreateWithoutLikesInput: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
    "posts",
    "profile",
    "comments",
    "answers",
  ],
  UserCreateOrConnectWithoutLikesInput: ["where", "create"],
  PostUpsertWithoutLikesInput: ["update", "create", "where"],
  PostUpdateToOneWithWhereWithoutLikesInput: ["where", "data"],
  PostUpdateWithoutLikesInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
  ],
  UserUpsertWithoutLikesInput: ["update", "create", "where"],
  UserUpdateToOneWithWhereWithoutLikesInput: ["where", "data"],
  UserUpdateWithoutLikesInput: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
    "posts",
    "profile",
    "comments",
    "answers",
  ],
  PostCreateWithoutTagsInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateOrConnectWithoutTagsInput: ["where", "create"],
  PostUpsertWithWhereUniqueWithoutTagsInput: ["where", "update", "create"],
  PostUpdateWithWhereUniqueWithoutTagsInput: ["where", "data"],
  PostUpdateManyWithWhereWithoutTagsInput: ["where", "data"],
  PostCreateWithoutImagesInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateOrConnectWithoutImagesInput: ["where", "create"],
  PostUpsertWithoutImagesInput: ["update", "create", "where"],
  PostUpdateToOneWithWhereWithoutImagesInput: ["where", "data"],
  PostUpdateWithoutImagesInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateWithoutCategoriesInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateOrConnectWithoutCategoriesInput: ["where", "create"],
  PostUpsertWithWhereUniqueWithoutCategoriesInput: [
    "where",
    "update",
    "create",
  ],
  PostUpdateWithWhereUniqueWithoutCategoriesInput: ["where", "data"],
  PostUpdateManyWithWhereWithoutCategoriesInput: ["where", "data"],
  PostCreateWithoutVideosInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateOrConnectWithoutVideosInput: ["where", "create"],
  PostUpsertWithoutVideosInput: ["update", "create", "where"],
  PostUpdateToOneWithWhereWithoutVideosInput: ["where", "data"],
  PostUpdateWithoutVideosInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateWithoutAudiosInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateOrConnectWithoutAudiosInput: ["where", "create"],
  PostUpsertWithoutAudiosInput: ["update", "create", "where"],
  PostUpdateToOneWithWhereWithoutAudiosInput: ["where", "data"],
  PostUpdateWithoutAudiosInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateWithoutFilesInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateOrConnectWithoutFilesInput: ["where", "create"],
  PostUpsertWithoutFilesInput: ["update", "create", "where"],
  PostUpdateToOneWithWhereWithoutFilesInput: ["where", "data"],
  PostUpdateWithoutFilesInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateWithoutLinksInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateOrConnectWithoutLinksInput: ["where", "create"],
  PostUpsertWithoutLinksInput: ["update", "create", "where"],
  PostUpdateToOneWithWhereWithoutLinksInput: ["where", "data"],
  PostUpdateWithoutLinksInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateWithoutPollsInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateOrConnectWithoutPollsInput: ["where", "create"],
  PostUpsertWithoutPollsInput: ["update", "create", "where"],
  PostUpdateToOneWithWhereWithoutPollsInput: ["where", "data"],
  PostUpdateWithoutPollsInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateWithoutQuestionsInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateOrConnectWithoutQuestionsInput: ["where", "create"],
  AnswerCreateWithoutQuestionInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
  ],
  AnswerCreateOrConnectWithoutQuestionInput: ["where", "create"],
  AnswerCreateManyQuestionInputEnvelope: ["data", "skipDuplicates"],
  PostUpsertWithoutQuestionsInput: ["update", "create", "where"],
  PostUpdateToOneWithWhereWithoutQuestionsInput: ["where", "data"],
  PostUpdateWithoutQuestionsInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  AnswerUpsertWithWhereUniqueWithoutQuestionInput: [
    "where",
    "update",
    "create",
  ],
  AnswerUpdateWithWhereUniqueWithoutQuestionInput: ["where", "data"],
  AnswerUpdateManyWithWhereWithoutQuestionInput: ["where", "data"],
  QuestionCreateWithoutAnswerInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "post",
  ],
  QuestionCreateOrConnectWithoutAnswerInput: ["where", "create"],
  UserCreateWithoutAnswersInput: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
    "posts",
    "profile",
    "comments",
    "likes",
  ],
  UserCreateOrConnectWithoutAnswersInput: ["where", "create"],
  QuestionUpsertWithoutAnswerInput: ["update", "create", "where"],
  QuestionUpdateToOneWithWhereWithoutAnswerInput: ["where", "data"],
  QuestionUpdateWithoutAnswerInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "post",
  ],
  UserUpsertWithoutAnswersInput: ["update", "create", "where"],
  UserUpdateToOneWithWhereWithoutAnswersInput: ["where", "data"],
  UserUpdateWithoutAnswersInput: [
    "id",
    "createdAt",
    "updatedAt",
    "email",
    "name",
    "posts",
    "profile",
    "comments",
    "likes",
  ],
  PostCreateWithoutQuotesInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateOrConnectWithoutQuotesInput: ["where", "create"],
  PostUpsertWithoutQuotesInput: ["update", "create", "where"],
  PostUpdateToOneWithWhereWithoutQuotesInput: ["where", "data"],
  PostUpdateWithoutQuotesInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "codes",
    "comments",
    "likes",
  ],
  PostCreateWithoutCodesInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "comments",
    "likes",
  ],
  PostCreateOrConnectWithoutCodesInput: ["where", "create"],
  PostUpsertWithoutCodesInput: ["update", "create", "where"],
  PostUpdateToOneWithWhereWithoutCodesInput: ["where", "data"],
  PostUpdateWithoutCodesInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "comments",
    "likes",
  ],
  PostCreateManyAuthorInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
  ],
  CommentCreateManyAuthorInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "postId",
  ],
  LikeCreateManyAuthorInput: ["id", "createdAt", "updatedAt", "postId"],
  AnswerCreateManyAuthorInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "questionId",
  ],
  PostUpdateWithoutAuthorInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "tags",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  CommentUpdateWithoutAuthorInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "post",
  ],
  LikeUpdateWithoutAuthorInput: ["id", "createdAt", "updatedAt", "post"],
  AnswerUpdateWithoutAuthorInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "question",
  ],
  ImageCreateManyPostInput: ["id", "createdAt", "updatedAt", "url"],
  VideoCreateManyPostInput: ["id", "createdAt", "updatedAt", "url"],
  AudioCreateManyPostInput: ["id", "createdAt", "updatedAt", "url"],
  FileCreateManyPostInput: ["id", "createdAt", "updatedAt", "url"],
  LinkCreateManyPostInput: ["id", "createdAt", "updatedAt", "url"],
  PollCreateManyPostInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
  ],
  QuestionCreateManyPostInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
  ],
  QuoteCreateManyPostInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
  ],
  CodeCreateManyPostInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
  ],
  CommentCreateManyPostInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "authorId",
  ],
  LikeCreateManyPostInput: ["id", "createdAt", "updatedAt", "authorId"],
  TagUpdateWithoutPostsInput: ["id", "createdAt", "updatedAt", "name"],
  ImageUpdateWithoutPostInput: ["id", "createdAt", "updatedAt", "url"],
  CategoryUpdateWithoutPostsInput: ["id", "createdAt", "updatedAt", "name"],
  VideoUpdateWithoutPostInput: ["id", "createdAt", "updatedAt", "url"],
  AudioUpdateWithoutPostInput: ["id", "createdAt", "updatedAt", "url"],
  FileUpdateWithoutPostInput: ["id", "createdAt", "updatedAt", "url"],
  LinkUpdateWithoutPostInput: ["id", "createdAt", "updatedAt", "url"],
  PollUpdateWithoutPostInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
  ],
  QuestionUpdateWithoutPostInput: [
    "id",
    "createdAt",
    "updatedAt",
    "question",
    "options",
    "Answer",
  ],
  QuoteUpdateWithoutPostInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
  ],
  CodeUpdateWithoutPostInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "language",
  ],
  CommentUpdateWithoutPostInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
  ],
  LikeUpdateWithoutPostInput: ["id", "createdAt", "updatedAt", "author"],
  PostUpdateWithoutTagsInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "images",
    "categories",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  PostUpdateWithoutCategoriesInput: [
    "id",
    "createdAt",
    "updatedAt",
    "title",
    "content",
    "published",
    "author",
    "tags",
    "images",
    "videos",
    "audios",
    "files",
    "links",
    "polls",
    "questions",
    "quotes",
    "codes",
    "comments",
    "likes",
  ],
  AnswerCreateManyQuestionInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "authorId",
  ],
  AnswerUpdateWithoutQuestionInput: [
    "id",
    "createdAt",
    "updatedAt",
    "content",
    "author",
  ],
};

type InputTypesNames = keyof typeof inputTypes;

type InputTypeFieldNames<TInput extends InputTypesNames> = Exclude<
  keyof (typeof inputTypes)[TInput]["prototype"],
  number | symbol
>;

type InputTypeFieldsConfig<TInput extends InputTypesNames> = FieldsConfig<
  InputTypeFieldNames<TInput>
>;

export type InputTypeConfig<TInput extends InputTypesNames> = {
  class?: ClassDecorator[];
  fields?: InputTypeFieldsConfig<TInput>;
};

export type InputTypesEnhanceMap = {
  [TInput in InputTypesNames]?: InputTypeConfig<TInput>;
};

export function applyInputTypesEnhanceMap(
  inputTypesEnhanceMap: InputTypesEnhanceMap,
) {
  for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
    const inputTypeName =
      inputTypeEnhanceMapKey as keyof typeof inputTypesEnhanceMap;
    const typeConfig = inputTypesEnhanceMap[inputTypeName]!;
    const typeClass = inputTypes[inputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      inputsInfo[inputTypeName as keyof typeof inputsInfo],
    );
  }
}
