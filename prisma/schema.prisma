datasource postgres {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
    provider = "prisma-client-js"
}

generator typegraphql {
    provider            = "typegraphql-prisma"
    output              = "../graphql"
    formatGeneratedCode = "prettier"
}

//TODO: define all data models

model User {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    email     String    @unique
    name      String?
    posts     Post[]
    profile   Profile?
    comments  Comment[]
    likes     Like[]
    answers   Answer[]
}

model Post {
    id         String     @id @default(uuid())
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    title      String
    content    String?
    published  Boolean    @default(false)
    author     User?      @relation(fields: [authorId], references: [id])
    authorId   String?
    tags       Tag[]
    images     Image[]
    categories Category[]
    videos     Video[]
    audios     Audio[]
    files      File[]
    links      Link[]
    polls      Poll[]
    questions  Question[]
    quotes     Quote[]
    codes      Code[]
    comments   Comment[]
    likes      Like[]
}

model Profile {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    bio       String?
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique
}

model Comment {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
}

model Like {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
}

model Tag {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String   @unique
    posts     Post[]
}

model Image {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    url       String   @unique
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
}

model Category {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String   @unique
    posts     Post[]
}

model Video {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    url       String   @unique
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
}

model Audio {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    url       String   @unique
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
}

model File {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    url       String   @unique
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
}

model Link {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    url       String   @unique
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
}

model Poll {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    question  String
    options   String[]
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
}

model Question {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    question  String
    options   String[]
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
    Answer    Answer[]
}

model Answer {
    id         String   @id @default(uuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    content    String
    question   Question @relation(fields: [questionId], references: [id])
    questionId String
    author     User     @relation(fields: [authorId], references: [id])
    authorId   String
}

model Quote {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String
    author    String
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
}

model Code {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String
    language  String
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
}
